// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Type{
  PERSONAL
  PUBLIC
}

enum SUBSCRIPTION_PLAN{
  PRO
  FREE
}
enum PRESET {
  HD
  SD
}

model User { 
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String @unique
  firstName String?
  lastName String?
  image String?
  studio Media?
  clerkid String @unique
  WorkSpace WorkSpace[]
  videos    Video[]
  subscription Subscription?
  members Member[]
  notification  Notification[]
  sender  Invite[]  @relation("sender")
  reciever  Invite[] @relation("reciever")
  trial Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Media{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String? @unique @db.Uuid
  User User? @relation(fields:[userId],references:[id])
  screen String?
  mic String?
  camera String?
  preset PRESET @default(SD)
  
}


model WorkSpace {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  type Type
  folders Folder[]
  videos  Video[]
  members Member[]
  invite  Invite[]
  User User? @relation(fields:[userId],references:[id])
  userId String? @db.Uuid
  createdAt DateTime @default(now())
}

model Notification{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User User? @relation(fields:[userId],references:[id])
  userId String? @db.Uuid
  content String
}

model Subscription{
      id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
      plan SUBSCRIPTION_PLAN @default(FREE)
      customerId  String? @unique
      User User? @relation(fields:[userId],references:[id])
      userId String? @unique @db.Uuid
}

model Member{
    id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    member Boolean @default(true)
    createdAt DateTime @default(now())
    User User? @relation(fields:[userId],references:[id])
    userId String? @db.Uuid
    WorkSpace WorkSpace? @relation(fields: [workspaceId], references: [id])
    workspaceId String? @db.Uuid
}

model Invite{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender User? @relation(fields:[senderId],references:[id],name: "sender")
  reciever User? @relation(fields:[recieverId],references:[id],name:"reciever")
  recieverId String? @db.Uuid
  senderId String? @db.Uuid
  content String
  WorkSpace WorkSpace? @relation(fields: [workspaceId], references: [id])
  workspaceId String? @db.Uuid
  accepted Boolean @default(false)
}

model Video{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User User? @relation(fields:[userId],references:[id],onDelete: Cascade)
  userId String? @db.Uuid
  Folder Folder? @relation(fields:[folderId],references:[id],onDelete: Cascade)
  folderId String? @db.Uuid
  WorkSpace WorkSpace? @relation(fields: [workspaceId], references: [id],onDelete: Cascade)
  workspaceId String? @db.Uuid
  views Int @default(0)
  summary String?
  processing  Boolean @default(true)
  source  String @unique
  title String? @default("Untitled Video")
  description String? @default("No Description")
  createdAt DateTime @default(now())

}
model Folder{
    id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name String   @default("Untitled Folder")
    videos  Video[]
    WorkSpace WorkSpace? @relation(fields: [workspaceId], references: [id])
    workspaceId String? @db.Uuid
    createdAt DateTime @default(now())

}